# originally copied from https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/ci.yml
name: ci
on:
  pull_request:
  push:
    branches:
    - master
    tags:
    - v*
  schedule:
  - cron: '00 01 * * *'
jobs:
  build:
    name: Build, test, and upload binaries
    env:
      CARGO: cargo
      TARGET_FLAGS: --target ${{ matrix.target }}
      RUST_BACKTRACE: 1
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
        - linux
        - macos
        - windows
        include:
        - build: linux
          os: ubuntu-20.04
          target: x86_64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin
        - build: windows
          os: windows-latest
          target: x86_64-pc-windows-msvc
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7.2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Install Rust toolchain target
      run: |
        rustup target add ${{ matrix.target }}
    - name: Cargo Cache
      uses: actions/cache@v2.1.4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"

    - name: Build rbspy
      run: ${{ env.CARGO }} build --release --locked --verbose --all ${{ env.TARGET_FLAGS }}

    - name: Prepare binary for upload
      if: runner.os != 'windows'
      run: |
        cp target/${{ matrix.target }}/release/rbspy rbspy-${{ matrix.target }}
    - name: Prepare binary for upload
      if: runner.os == 'windows'
      run: |
        copy target/${{ matrix.target }}/release/rbspy.exe rbspy-${{ matrix.target }}.exe

    - name: Upload Linux and macOS Binaries
      if: runner.os != 'windows'
      uses: actions/upload-artifact@v2
      with:
        name: rbspy-${{ matrix.target }}
        path: rbspy-${{ matrix.target }}
    - name: Upload Windows Binaries
      if: runner.os == 'windows'
      uses: actions/upload-artifact@v2
      with:
        name: rbspy-${{ matrix.target }}.exe
        path: rbspy-${{ matrix.target }}.exe

    - name: Run tests
      timeout-minutes: 5
      run: ${{ env.CARGO }} test --release --verbose  ${{ env.TARGET_FLAGS }}
      if: runner.os != 'macOS'
    - name: Run tests
      timeout-minutes: 5
      run: sudo "PATH=$PATH" ${{ env.CARGO }} test --release --verbose  ${{ env.TARGET_FLAGS }}
      if: runner.os == 'macOS'
    - name: Run rbspy with alternative mallocs
      if: runner.os == 'linux'
      run: |
        set -e
        sudo apt install -y libjemalloc2 libtcmalloc-minimal4
        target/${{ matrix.target }}/release/rbspy record env LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so.2 ruby ci/ruby-programs/short_program.rb
        target/${{ matrix.target }}/release/rbspy record env LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4 ruby ci/ruby-programs/short_program.rb

  build-linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [i686-musl, armv7-musleabihf, aarch64-musl, x86_64-musl]
    container:
      # we're building with 'rust-musl-cross' https://github.com/messense/rust-musl-cross
      # with some additions to add a statically compiled version of libunwind
      image: docker://benfred/rust-musl-cross:${{ matrix.target }}
      env:
        RUSTUP_HOME: /root/.rustup
        CARGO_HOME: /root/.cargo
    steps:
    - uses: actions/checkout@v2
    - name: Cargo Cache
      uses: actions/cache@v2.1.4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
    - name: Build
      run: cargo build --release --locked
    - name: Prepare binary for upload
      run: |
        cp target/*/release/rbspy rbspy-${{ matrix.target }}
    - name: Upload Binaries
      uses: actions/upload-artifact@v2
      with:
        name: rbspy-${{ matrix.target }}
        path: rbspy-${{ matrix.target }}

  release:
    name: Publish release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [build-linux-cross, build]
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: raw-artifacts
      - name: Prepare binary archives
        run: |
          set -euo pipefail

          mkdir staging
          mv $(find raw-artifacts -type f | xargs) staging

          mkdir archives
          cd staging
          for target in $(ls); do
            if echo "$target" | grep -q ".exe" 2>/dev/null; then
              echo "Found Windows binary for target $target"
              zip -j ../archives/$target.zip $target
            else
              echo "Found unix binary for target $target"
              tar czf ../archives/$target.tar.gz $target
            fi
          done

      - uses: "marvinpinto/action-automatic-releases@v1.1.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          draft: true
          prerelease: false
          files: |
            archives/*

# TODO: maybe add this later if we decide to make rustfmt actually pass
#  rustfmt:
#    name: rustfmt
#    runs-on: ubuntu-18.04
#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v2
#    - name: Install Rust
#      uses: actions-rs/toolchain@v1
#      with:
#        toolchain: stable
#        override: true
#        profile: minimal
#        components: rustfmt
#    - name: Check formatting
#      run: |
#        cargo fmt --all -- --check
